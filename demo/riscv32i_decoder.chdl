instTable= require './instTable'
_ = require 'lodash'

class riscv32i_decoder extends Module

  constructor: ->
    super()

    opWidth=Math.ceil(Math.log2(instTable.instList.length))

    Port(
      stall: input()
      
      fetch:
        instr: input(32)
        pc: input(32)

      regFile:
        rs1Index: output(5)
        rs2Index: output(5)
      
      alu:
        op: output(opWidth).fromReg('opLatch')
        pc: output(32).fromReg('pcLatch')
        instr: output(32).fromReg('instrLatch')
    )

    Reg(
      opLatch: reg(opWidth)
      instrLatch: reg(32)
      pcLatch: reg(32)
    )

    Wire(
      slice:
        opcode: wire(@fieldWidth('opcode'))
        funct3: wire(@fieldWidth('funct3'))
        funct7:  wire(@fieldWidth('funct7'))
        immI:  wire(@fieldWidth('immI'))
    )

  mask: (width)->
    list= (1<<i for i in [0...width])
    return $ hex(width,_.reduce(list,((value,n)->value|n),0))
    
  fieldWidth: (s)-> instTable.fieldProperty[s].width

  sliceInstr: (lsb,width)-> $ (@instrLatch>>lsb) & @mask(width)

  build: ->
    for name in Object.keys(@slice)
      property =instTable.fieldProperty[name]
      assign(@slice[name]) = $ @sliceInstr(property.lsb,property.width)

    for name in Object.keys(@regFile)
      property =instTable.fieldProperty[name]
      assign(@regFile[name])    = $ @sliceInstr(property.lsb,property.width)
    
    @opLatch.stateDef(instTable.instList)
      
    always
      $if(!@stall)
        assign(@instrLatch) = $ @fetch.instr
        assign(@pcLatch) = $ @fetch.pc
      $endif

    always
      for item in instTable.table
        $if(!@stall && @slice.opcode==bin(@fieldWidth('opcode'),item[1]))
          for i in item[2]
            cond=[]
            for checkItem in instTable.checkList when i[checkItem]?
              cond.push($ @slice[checkItem]==bin(@fieldWidth(checkItem),i[checkItem]))
            if cond.length>0
              setCond=$opJoin('&&',cond)
              $if(setCond)
                @opLatch.setState i.name
              $endif
            else
              @opLatch.setState i.name
        $endif

module.exports=riscv32i_decoder
