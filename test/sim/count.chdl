class count extends Module
  constructor: ->
    super()
    Port(
      clk: input().asClock()
      rstn: input().asReset()
      enable: input()
      dout: output(32)
    )

    Reg(
      cnt: reg(32)
    )

  build: ->
    assign(@dout) = @cnt

    consign(@cnt)
      $if(@enable)
        $if(@cnt<100)
          $ @cnt+1
        $else
          $ 0xff
      $else
        $ @cnt

class bench_top extends Module
  u0_count: new count()

  constructor: ->
    super()

    Mixin importLib('verilog_helpers.chdl')

    Reg(
      rstn: vreg()
      clk: vreg()
      en: vreg()
    )

    Channel(
      en_channel: channel()
      dout: channel()
    )

    @u0_count.bind(
      enable: @en_channel
      dout: @dout_channel
    )

    Property(
      default_clock: 'clk'
      default_reset: 'rstn'
    )

  build: ->
    assign(@en_channel) = @en

    forever
      $flow =>
        go 10
        assign(@clk) = !@clk

    s1= ()=>
      assign(@rstn) =  1
      go 10
      assign(@rstn) =  0
      go 10
      assign(@rstn) =  1
      go 10
      assign(@en) = 1
      go 1000
      assign(@en) = 0
      posedge(@clk)
      assign(@en) = 1
      wait($ @clk==1)
      assign(@en) = 0
      go 20000
      display("sim finished %d",$(@dout_channel))
      @sim_finish()

    initial
      $flow => s1()

module.exports=bench_top

