class InitSimple extends Module
  constructor: ->
    super()
    @tb= MixinAs importLib('chdl_testbench_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      aa: vreg(16)
      cc: vreg(16)
    )

  build: ->
    v1= vreg()
    v2= vreg()
    v3= vreg()
    @dump_wave('test')

    forever
      $flow =>
        go 10
        assign(@cc) = @cc+1

    s1=(d1,d2,d3)=>
      return =>
        posedge(v1)
        assign(@aa) = d1
        negedge(v2)
        assign(@aa) = d2
        wait($ v3==1)
        assign(@aa) = d3
        go(100)
        assign(@aa) = 0

    s2= =>
      return =>
        assign(@aa) = 201
        verilog('$display("data is %d",aa);')
        go(100)
        event('hello')

    initial
      $flow s1(0x100,0x200,0x0300)
      $flow s2()

    initial
      $flow =>
        trigger('hello')
        assign(@aa) = 0x55aa

    initial
      $flow =>
        go(105)
        @assert_eq(@cc,10,'test forever')
        assign v1 =1
        go(100)
        @assert_eq(@aa,0x100,'test posedge')
        assign v2 =1
        go(100)
        assign v2 =0
        go(100)
        @assert_eq(@aa,0x200,'test nedgedge')
        assign v3 =1
        go(5)
        @assert_eq(@aa,0x300,'test wait')
        trigger('hello')
        go(5)
        @assert_eq(@aa,0x55aa,'test event')
        go(100)
        @assert_report()
        @sim_finish()

    fifo = @tb.tb_fifo_gen(32,4)
    initial
      $flow =>
        go(105)
        fifo.push(1)
        fifo.push(2)
        fifo.push(3)
        fifo.push(4)
        Net(front,32) = fifo.$front()
        Net(tail,32) = fifo.$tail()
        Net full = fifo.$isFull()
        Net(size,32) = fifo.$getSize()
        @assert_eq(front,1,'test tb fifo')
        @assert_eq(tail,4,'test tb fifo')
        @assert_eq(full,1,'test tb fifo')
        @assert_eq(size,4,'test tb fifo')
        go(105)
        fifo.pop()
        Net(front,32) = fifo.$front()
        @assert_eq(front,2,'test tb fifo')
      
module.exports=InitSimple

