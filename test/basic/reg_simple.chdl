class RegSimple extends Module
  constructor: ->
    super()

    Port(
      hclk: input().asClock()
      rstn: input().asReset()
      clear: input()
      aa:
        bb:
          cc: output(9).asReg({reset:null})
      dd: output(9).asReg()
      en:
        notupdateEnable: input()
      initEnable: input()
      reg_out: [
        output(5)
        output(8)
        output(6)
        output(7)
        output(8)
        output(9)
        output(9)
        output(9)
        output(9)
        output(9)
        output(9)
        output(9)
        output()
        output()
        output(8)
      ]
      neg_init:
        ff15: output(16)
        ff16: output(16)
        ff17: output(64)
    )

    Reg(
      ff0: reg(5).init(23).clock('hclk').reset('rstn').syncReset()
      ff1: reg(9)
      ff2: reg(6).clock('hclk').reset(null)
      ff3: reg(7).init(0x7f).clock('hclk').clear('clear')
      ff4: reg(8).clock('hclk').reset('rstn','async',true)
      ff5: reg(9).clock('hclk').negedge()
      ff6: reg(1).init(0).highReset()
      ff7: reg(1).init(1).highReset()
      ff8: reg(9)
      ff9: reg(9).enable('en.notupdateEnable',0)
      ff10: [
        reg(9).init(100).highReset()
        reg(9).init(200).highReset()
      ]
      ff11:
        a:reg(9).init(11).highReset()
        b:reg(9).init(22).highReset()
      ff12: reg(5)
      ff13: reg(5)
    )

  doSync: (sigIn)->
    width=sigIn.getWidth()
    d1 = reg(width,'sync')
    d2 = reg(width,'sync')
    consign d1 = sigIn
    consign d2 = d1
    return $ d2

  build: ->
    @ff12.stateDef(['idle','write','pending','read'])
    @ff13.stateDef(
      idle: 0
      write: 10
      pending: 20
      )

    always
      @ff12.setState('write')

     $stateSwitch(@ff13) =>
       'idle': [
         $cond(@clear==1) => $ @ff13.getState('write')
       ]
       'write': [
         $cond(@clear==1) => $ @ff13.getState('pending')
       ]
       'pending': [
         $cond(@clear==0) => $ @ff13.getState('idle')
       ]

    assign @reg_out[12] = @ff12.isState('write','idle')
    assign @reg_out[13] = @ff13.isState('pending')

    assign @reg_out[0] = @ff0

    consign @ff0 = @ff0

    consign @ff1 = 0b111111110
    assign(@reg_out[1]) = @ff1.fromMsb(8)

    assign(@reg_out[2]) = @ff2
    consign @ff2 = @ff2

    consign @ff3 = 0
    assign(@reg_out[3]) = @ff3

    assign(@reg_out[4]) = @ff4

    assign(@reg_out[5]) = @ff5
    consign @ff5 = 0x1ff

    @ff1.drive(@reg_out[6])

    assign(@reg_out[7]) = @ff8

    assign @reg_out[8] = @ff9
    consign @ff9 = 123

    assign @reg_out[9] = @doSync(@ff1)

    assign @reg_out[10] = @ff10[1]
    assign @reg_out[11] = @ff11.b

    always
      @aa.bb.cc.pending(0)
      $if(@initEnable)
        consign(@aa.bb.cc(0)) = 1
        consign(@aa.bb.cc(8:1)) = 100

    consign(@ff4) = @aa.bb.cc

    consign(@dd) = 100

    consign(@ff8) =>
      $if(@ff6)
        $ @aa.bb.cc
      $elseif(@ff7)
        $if(0)
          $ @aa.bb.cc+1
        $else
          $ 32'h123'
      $else
        $ 32'h456'

    Dff(ff14,32) = 32'h12345678'

    SignDff(ff18,32) = 32'h12345678'

    ff19 = reg(20,'ff19').setSign()

    consign ff19 = 1


    assign @reg_out[14]=ff14.fromMsb(16).fromLsb(8)

    ff15=reg(16,'ff15').init(-1)
    ff16=reg(16,'ff16').init(-2)
    ff17=reg(64,'ff17').init(-1)

    consign ff15 = ff15
    consign ff16 = ff16
    consign ff17 = ff17

    assign @neg_init.ff15 = ff15
    assign @neg_init.ff16 = ff16
    assign @neg_init.ff17 = ff17


class tb extends Module
  constructor: ->
    super()

    Mixin importLib('verilog_helpers.chdl')

    CellMap(dut:new RegSimple())

    Channel(
      a_ch: channel()
      b_ch: channel()
      c_ch: channel()
      en_ch: channel()
      init_ch:channel()
      d_ch:channel()
      neg_init_ch: channel()
      )

    Reg(
      clk: vreg()
      rstn: vreg().init(1)
      )


    @dut.bind(
      clear: @a_ch
      aa:    @b_ch
      reg_out: @c_ch
      en:    @en_ch
      dd:    @d_ch
      initEnable: @init_ch
      neg_init: @neg_init_ch
    )

    Property(
      default_clock: 'clk'
      default_reset: 'rstn'
    )

  build: ->
    @create_clock(@clk,10)
    @create_resetn(@rstn)

    initial
      $flow =>
        assign @a_ch= 1
        assign @en_ch.notupdateEnable = 1 #no enable
        go 1000
        assign @init_ch = 1
        go 1000
        @assert_eq(@c_ch[0],23,'test init value')
        @assert_eq(@c_ch[1],0xff,'test fromMsb')
        @assert_ne(@c_ch[2],0,'test no reset')
        @assert_eq(@c_ch[3],0x7f,'test clear enable')
        @assert_eq(@c_ch[4],0,'test reset parameter')
        @assert_eq(@c_ch[5],0x1ff,'test negedge clock')
        @assert_eq(@c_ch[6],0b111111110,'test drive function')
        @assert_eq(@c_ch[7],0x123,'test assign from else if')
        @assert_eq(@c_ch[8],0,'test enable')
        @assert_eq(@c_ch[9],0b111111110,'test local register')
        @assert_eq(@c_ch[10],200,'test register array')
        @assert_eq(@c_ch[11],22,'test register map')
        @assert_1(@c_ch[12],'test state set/is')
        @assert_1(@c_ch[13],'test state switch')
        @assert_eq(@b_ch.bb.cc,201,'test output use as reg')
        @assert_eq(@c_ch[14],0x34,'test fromMsb fromLsb')
        @assert_eq(@d_ch,100,'test port asReg')
        @assert_eq(@d_ch,100,'test port asReg')
        @assert_eq(@neg_init_ch.ff15,0xffff,'test neg init')
        @assert_eq(@neg_init_ch.ff16,0xfffe,'test neg init')
        @assert_eq(@neg_init_ch.ff17,hex(64,0xffffffffffffffffn),'test neg init')
        go 1000
        @assert_report()
        @sim_finish()

module.exports=tb
