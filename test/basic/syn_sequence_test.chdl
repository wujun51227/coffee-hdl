class SynSequenceTest extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Reg(
      aa: reg(8)
    )

    Reg(
      clk: vreg()
      rstn: vreg().init(1)
      )

    SetProperty(
      default_clock: 'clk'
      default_reset: 'rstn'
    )

  build: ->
    @create_clock(@clk,10)
    @create_resetn(@rstn)

    v1 = vreg()
    v2 = vreg().init(1)
    v3 = vreg(2)

    seqStatus=wire(8)

    always
      $sequence('test_seq')
      .init ()=>
        assign(@aa) = 1
      .posedge(v1) =>
        assign(@aa) = 2
      .next(5) =>
        assign(@aa) = 3
      .negedge(v2) (transition,next)=>
        $if(transition) => assign(@aa) = 4
        $elseif(next) => assign(@aa) = 6
        $else => assign(@aa) = 5
      .wait($(v3==1)) (trans,next)=>
        assign(@aa) = 7
      .wait($(v3==2)) (trans,next)=>
        $if(next)  #this next is posedge v1
          assign(@aa) =8
        $else
          assign(@aa) =9
      .end(seqStatus)

    initial
      $flow =>
        go 1001
        @assert_eq(@aa,1,'test init')
        @assert_eq(seqStatus,0,'test seqStatus')
        assign v1 = 1
        posedge $clock()
        assign v1 = 0
        posedge $clock()
        go 5
        @assert_eq(seqStatus,1,'test seqStatus')
        @assert_eq(@aa,2,'test posedge')
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        go 5
        @assert_eq(@aa,3,'test next')
        assign v2 = 0
        posedge $clock()
        assign v2 = 1
        posedge $clock()
        go 5
        @assert_eq(@aa,4,'test negedge')
        posedge $clock()
        go 5
        @assert_eq(@aa,5,'test not in transition')
        assign v3 = 1
        posedge $clock()
        go 5
        @assert_eq(@aa,6,'test next')
        posedge $clock()
        go 5
        @assert_eq(@aa,7,'test wait')
        assign v3 = 2
        posedge $clock()
        assign v1 = 0
        @assert_eq(seqStatus,4,'test seqStatus')
        posedge $clock()
        go 5
        @assert_eq(@aa,9,'test last state')
        posedge $clock()
        go 5
        @assert_eq(@aa,1,'test go idle')

      $flow =>
        go 1001
        @assert_eq(@aa,1,'test init')
        assign v1 = 1
        posedge $clock()
        assign v1 = 0
        posedge $clock()
        go(5)
        @assert_eq(@aa,2,'test posedge')
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        @assert_eq(@aa,2)
        posedge $clock()
        go(5)
        @assert_eq(@aa,3,'test next')
        assign v2 = 0
        posedge $clock()
        assign v2 = 1
        posedge $clock()
        go(5)
        @assert_eq(@aa,4,'test negedge')
        posedge $clock()
        go(5)
        @assert_eq(@aa,5,'test not in transition')
        assign v3 = 1
        posedge $clock()
        go(5)
        @assert_eq(@aa,6,'test next')
        posedge $clock()
        go(5)
        @assert_eq(@aa,7,'test wait')
        assign v3 = 2
        posedge $clock()
        assign v1 = 1
        posedge $clock()
        go(5)
        @assert_eq(@aa,8,'test skip idle if possible')
        posedge $clock()
        go(5)
        @assert_eq(@aa,2,'test start from first state')
        go 100
        @assert_report()
        @sim_finish()

module.exports=SynSequenceTest

