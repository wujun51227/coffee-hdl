_ = require 'lodash'

class asyncTransTb extends Module
  constructor: ->
    super()

    Mixin importLib('chdl_component_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      tx_clk: vreg()
      rx_clk: vreg()
      rstn: vreg().init(1)
      push:vreg()
    )

    @setDefaultClock('tx_clk')
    @setDefaultReset('rstn')


  build: ->
    @create_clock(@tx_clk,35)
    @create_clock(@rx_clk,25)
    @create_resetn(@rstn)

    Net valid
    Net rx_done

    initial
      seq = $sequence()
      seq.delay(500) =>
      seq.posedge(@tx_clk) =>
        assign @push=1
      .posedge(@tx_clk) =>
        assign @push=0
      seq.delay(500) =>
      seq.posedge(@tx_clk) =>
        assign @push=1
      .posedge(@tx_clk) =>
        assign @push=0
      seq.delay(500) =>
      seq.posedge(@tx_clk) =>
        assign @push=1
      .posedge(@tx_clk) =>
        assign @push=0
      seq.end()

    initial
      seq = $sequence()
      seq.delay(100) =>
      seq.polling(@rx_clk,$(rx_done==1)) =>
        @assert_1(rx_done)
      seq.polling(@rx_clk,$(rx_done==1)) =>
        @assert_1(rx_done)
      seq.polling(@rx_clk,$(rx_done==1)) =>
        @assert_1(rx_done)
      seq.delay(100) =>
        @assert_report('async trans test')
        @sim_finish()
      .end()

    initial
      seq = $sequence()
      seq.delay(10000) =>
        @assert_fail()
        @assert_report('async trans test')
        @sim_finish()
      .end()

    assign rx_done  = $async_trans(@push,@tx_clk,@rstn,@rx_clk,@rstn)

module.exports=asyncTransTb
