_ = require 'lodash'

class asyncFifoTb extends Module
  constructor: ->
    super()

    Mixin importLib('chdl_component_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      clk: vreg()
      rstn: vreg().init(1)
      din:vreg(8)
      push:vreg()
      pop:vreg()
    )

    Wire(
      empty: wire()
      full: wire()
      dout: wire(8)
    )

    @setDefaultClock('clk')
    @setDefaultReset('rstn')


  build: ->
    @create_clock(@clk,10)
    @create_resetn(@rstn)
    @dump_wave("test.fsdb")


    initial
      $sequence()
      .delay(500) =>
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @push=0
      .wait($(@empty==0)) =>
      .posedge(@clk) =>
        assign @pop=1
      #.posedge(@clk) =>
      #  assign @pop=1
      .posedge(@clk) =>
        assign @pop=0
      .delay(100) =>
        @sim_finish()
      .end()

    assign({dout:@dout,empty:@empty,full:@full}) = $async_fifo(8,@din,@push.attach(@clk,@rstn),@pop.attach(@clk,@rstn))



module.exports=asyncFifoTb
