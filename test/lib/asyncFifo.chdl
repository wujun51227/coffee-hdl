_ = require 'lodash'

class asyncFifoTb extends Module
  constructor: ->
    super()

    Mixin importLib('chdl_component_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      clk: vreg()
      rstn: vreg().init(1)
      din:vreg(8)
      push:vreg()
      pop:vreg()
    )

    Wire(
      empty: wire()
      full: wire()
      dout: wire(8)
    )

    SetProperty(
      default_clock: 'clk'
      default_reset: 'rstn'
    )


  build: ->
    @create_clock(@clk,20)
    @create_resetn(@rstn)

    initial
      $flow =>
        go 5000
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0x55)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0xaa)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0x55)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0xaa)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0x55)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0xaa)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0x55)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0xaa)
      .polling(@clk,$(@empty==0)) =>
        assign @pop = 1
        go 5
        @assert_eq(@dout,0x55)
      .posedge(@clk) =>
        go 5
        @assert_1(@empty)
        go 1000
        @assert_report('async fifo test')
        @sim_finish()
      .end()

    initial
      $sequence()
        go 500
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
      .posedge(@clk) =>
        assign @din=0xaa
        assign @push=1
        go 5
        @assert_0(@full)
      .posedge(@clk) =>
        assign @din=0x55
        assign @push=1
        go 5
        @assert_0(@full)
      .posedge(@clk) =>
        assign @push=0
        go 5
        @assert_1(@full)
      .end()

    assign({dout:@dout,empty:@empty,full:@full}) = $async_fifo(8,@din,@push.attach(@clk,@rstn),@pop.attach(@clk,@rstn))



module.exports=asyncFifoTb
