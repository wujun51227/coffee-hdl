_ = require 'lodash'

class handshakeTb extends Module
  constructor: ->
    super()

    Mixin importLib('chdl_component_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      tx_clk: vreg()
      rx_clk: vreg()
      rstn: vreg().init(1)
      din:vreg(16)
      push:vreg()
    )

    Wire(
      rx_data: wire(16)
      rx_done: wire()
      tx_done: wire()
      ack: wire()
    )

    Property(
      default_clock: 'tx_clk'
      default_reset: 'rstn'
    )


  build: ->
    @create_clock(@tx_clk,35)
    @create_clock(@rx_clk,25)
    @create_resetn(@rstn)

    Net valid
    Net(data,16)

    list=[
      0x1122
      0x3344
      0xa122
      0x1b22
      0x11c2
      0x112d
      0x9122
      0x1922
      0x1192
      0x1129
      0x0011
    ]

    initial
      $flow =>
        go 500
        for i in list
          posedge(@tx_clk)
          assign @din=i
          assign @push=1
          posedge(@tx_clk)
          assign @push=0
          wait($ @tx_done)
        posedge(@tx_clk)
        assign @push=0

    initial
      $flow =>
        go 100
        for i in list
          polling(@rx_clk,$(@rx_done==1))
          @assert_eq(@rx_data,i)
        go 100
        @assert_report('handshake test')
        @sim_finish()

    assign({valid:valid,data:data,done:@tx_done})  = $async_handshake_tx(@push,@din,@ack,@tx_clk)
    assign({ack:@ack,data:@rx_data,done:@rx_done}) = $async_handshake_rx(valid,data,@rx_clk)



module.exports=handshakeTb
