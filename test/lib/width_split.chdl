_ = require 'lodash'

class widthSplitTb extends Module
  constructor: ->
    super()

    Mixin importLib('chdl_component_lib.chdl')
    Mixin importLib('verilog_helpers.chdl')

    Reg(
      clk: vreg()
      rstn: vreg().init(1)
      din:vreg(32)
      push:vreg()
      pop:vreg()
    )

    Wire(
      empty: wire()
      full: wire()
      dout: wire(8)
    )

    Property(
      default_clock: 'clk'
      default_reset: 'rstn'
    )


  build: ->
    @create_clock(@clk,10)
    @create_resetn(@rstn)

    initial
      $flow =>
        go 500
        posedge @clk
        assign @din=0x12345678
        assign @push=1
        posedge @clk
        assign @din=0x55aa55aa
        assign @push=1
        posedge @clk
        assign @din=0xaabbccdd
        assign @push=1
        posedge @clk
        assign @din=0x55667788
        assign @push=1
        posedge @clk
        assign @push=0
        go 5
        @assert_eq(@full,1,'full set')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x78,'select byte 0')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x56,'select byte 1')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x34,'select byte 2')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x12,'select byte 3')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xaa,'select byte 0')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x55,'select byte 1')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xaa,'select byte 2')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0x55,'select byte 3')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xdd,'select byte 0')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xcc,'select byte 1')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xbb,'select byte 2')
        posedge @clk
        assign @pop=1
        go 5
        @assert_eq(@dout,0xaa,'select byte 3')
        posedge @clk
        assign @pop=1
        posedge @clk
        assign @pop=1
        posedge @clk
        assign @pop=1
        posedge @clk
        assign @pop=1
        posedge @clk
        assign @pop=0
        go 5
        @assert_eq(@empty,1,'empty set')
        go 100
        @assert_report("width split test")
        @sim_finish()

    assign({dout:@dout,empty:@empty,full:@full}) = $width_split(3,@din,@push,@pop,8)



module.exports=widthSplitTb
