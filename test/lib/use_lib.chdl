someLib = require './somelib.json'
_ = require 'lodash'

class cell1 extends Module
  constructor: ->
    super()
    Port(
      bundle:
        sub:
          din: input(16)
          dout: output(16)
    )

  build: ->

class UseLib extends Module
  u0_cell1 : new cell1()
  u0_cell2 : new cell1()
  u0_cell3 : new cell1()
  constructor: ->
    super()

    @yyy=importLib('chdl_primitive_lib.chdl')

    a={
      b:
        c: input()
        d: [
          output(5)
          input(6)
          ]
    }
    Port(
      in: @yyy.createArray(10,=>input(10))
      a: a
      t:@mirrorPort(a)
      clk1: input(1).asClock()
    )

    template={
      e:
        f: [wire(),wire()]
    }

    Wire(
      w: @createArray(32,=>wire(10))
      select: wire(3)
      d: @bundleClone(template)
      g: @bundleClone(template)
      h: @bundleClone(template)
      syncin: wire(1)
      dout: wire(1)
      dout1: wire(1)
      dout2: wire(1)
      dout3: wire(1)
      dout4: wire(1)
      dout5: wire(1)
      dout6: wire(1)
      dout7: wire(1)
    )

    Channel(
      x: @createArray(10,=>channel())
    )

    @u0_cell1.bind(
      bundle: @x[0]
    )

    @u0_cell2.bind(
      bundle: @x[1]
    )

    @u0_cell3.bind(
      bundle: @x[2]
    )

  build: ->
    $channelMux(@select,@x[0],@x[1],@x[2])
    $bundleMap(@g,@d,all1)
    $bundleJoin(@d,[@g,@h],(a,b)=>$ a+b)

    assign(@dout) = $rise($doubleSync(@syncin))

    assign(@dout1) = $divider(@clk1,4)

    assign(@dout2) = $arrayDecode(@w,@select,10)

    assign(@dout3) = $oneOf(@clk1,[@x[0],@x[1],@x[2]])

    assign(@dout4) = $same([@x[0],@x[1],@x[2]])

    assign(@dout5) = $count1(@select)

    assign(@dout6) = $inRange(@select,@dout1,@dout2)

    assign(@dout7) = $delay(5,@dout6)

    @dumpWave('hello.fsdb',1000)

module.exports=UseLib
