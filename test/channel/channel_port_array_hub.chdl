#########################################################3
# Design
#########################################################3
class cell1 extends Module
  constructor: ->
    super()
    Port(
      bundle:
        din: output(16)
        dout: input(16)
    )

  build: ->
    assign @bundle.din=@bundle.dout

class cell2 extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Port(
      bundles: [
        {
          din: input(16)
          dout: output(16)
        }
        {
          din: input(16)
          dout: output(16)
        }
      ]
    )

  build: ->
    assign @bundles[0].dout=0x1111
    assign @bundles[1].dout=0x2222

    initial
      $sequence()
      .delay(100) =>
        @assert_eq(@bundles[0].din,0x1111,'check cell1 bundle connection')
        @assert_eq(@bundles[1].din,0x2222,'check cell2 bundle connection')
      .end()


class ChannelPortArrayHub extends Module
  u0_cell2: new cell2()
  u0_cell1: new cell1()
  u1_cell1: new cell1()

  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')

    Channel(
      conn0: channel()
      conn1: channel()
      conn2: channel()
      )

    @u1_cell1.bind(
      bundle: @conn2
    )

    @u0_cell1.bind(
      bundle: @conn1
    )

    @u0_cell2.bind(
      bundles: @conn0
    )

  build: ->
    $channelPortHub(@conn0.Port[0],@conn1.Port)
    $channelPortHub(@conn0.Port[1],@conn2.Port)

    initial
      $sequence()
      .delay(200) =>
        @assert_report('channel port array hub')
        @sim_finish()
      .end()

module.exports=ChannelPortArrayHub

