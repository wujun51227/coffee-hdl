#########################################################3
# Design
#########################################################3
class cell1 extends Module
  constructor: ->
    super()
    Port(
      din: input(16)
      dout: output(16)
      bus:
        din: input(16)
        dout: output(16)
    )

  build: ->
    assign @dout = @din
    assign @bus.dout = @bus.din

class cell2 extends Module
  u0_cell1: new cell1()
  constructor: ->
    super()
    Port(
      bundle:
        din: bind('c_din')
        dout: bind('c_dout')
      ext: bind('ext_ch')
    )

    Channel(
      c_din: channel()
      c_dout: channel()
      ext_ch: channel()
    )

    @u0_cell1.bind(
      din: @c_din
      dout: @c_dout
      bus: @ext_ch
    )

  build: ->

class ChannelBindExtend extends Module
  u0_cell2: new cell2()

  constructor: ->
    super()

    Port(
      top_port:
        ch1: bind('ch1')
        ch2: bind('ch2')
        din: input(16)
        dout: output(16)
    )

    Channel(
      ch1: channel()
      ch2: channel()
      )

    @u0_cell2.bind(
      bundle: @ch1
      ext: @ch2
    )

  build: ->
    assign @top_port.dout = @top_port.din

class tb extends Module
  dut: new ChannelBindExtend()

  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Channel(
      ch: channel()
      )

    @dut.bind(
      top_port: @ch
      )

  build: ->
    initial
      $sequence()
      .delay(100) =>
        assign @ch.ch1.din= 0x55aa
        assign @ch.ch2.din= 0x1234
        assign @ch.din= 0x7788
      .delay(100) =>
        @assert_eq(@ch.ch1.dout,0x55aa,'test connection')
        @assert_eq(@ch.ch2.dout,0x1234,'test connection')
        @assert_eq(@ch.dout,0x7788,'test connection')
        @assert_report('channel bind extend')
        @sim_finish()
      .end()

module.exports=tb

