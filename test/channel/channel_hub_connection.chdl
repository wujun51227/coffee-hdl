#########################################################3
# Design
#########################################################3

class cell1 extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Port(
      bundle:
        din: input(16)
        dout: output(16)
        sub:
          din: input(16)
          dout: output(16)
    )

  build: ->
    assign @bundle.dout=0x1111
    assign @bundle.sub.dout=0x2222
    initial
      $sequence()
      .delay(100) =>
        @assert_eq(@bundle.din,0x4444,'check cell1 bundle din')
        @assert_eq(@bundle.sub.din,0x3333,'check cell1 sub din')
      .end()

class cell2 extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Port(
      sub:
        din: output(16)
        dout: input(16)
    )

  build: ->
    assign @sub.din=0x3333
    initial
      $sequence()
      .delay(100) =>
        @assert_eq(@sub.dout,0x2222,'check cell2 sub dout')
      .end()

class cell3 extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Port(
      bundle:
        din: output(16)
        dout: input(16)
        sub:
          din: input(16)
          dout: input(16)
    )

  build: ->
    assign @bundle.din= 0x4444
    initial
      $sequence()
      .delay(100) =>
        @assert_eq(@bundle.dout,0x1111,'check cell3 bundle dout')
        @assert_eq(@bundle.sub.din,0x3333,'check cell3 sub din')
      .end()


class ChannelHubConnection extends Module
  u0_cell1: new cell1()
  u0_cell2: new cell2()
  u0_cell3: new cell3()

  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')

    Channel(
      c1_bundle: channel()
      c2_sub: channel()
      c3_bundle: channel()
    )

    @u0_cell1.bind(
      bundle: @c1_bundle
    )

    @u0_cell2.bind(
      sub: @c2_sub
    )

    @u0_cell3.bind(
      bundle: @c3_bundle
    )


  build: ->
    $channelPortHub( @c1_bundle.Port.sub,@c2_sub.Port,@c3_bundle.Port.sub)
    $channelPortHub( @c1_bundle.Port,@c3_bundle.Port)

    initial
      $sequence()
      .delay(1000) =>
        @assert_report('channel hub connection')
        @sim_finish()
      .end()

module.exports=ChannelHubConnection

