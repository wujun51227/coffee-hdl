class cell1 extends Module
  constructor: ->
    super()
    Port(
      bundle:
        data: output(16)
    )

  build: ->
    assign @bundle.data= 0x1234

class cell2 extends Module
  constructor: ->
    super()
    CellMap(
      u0: new cell3()
    )

    Channel(
      ch: @mold(@u0)
    )

  build: ->

class cell3 extends Module
  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Port(
      bundle:
        data: input(16)
    )

  build: ->
    initial
      $sequence()
      .delay(100) =>
        @assert_eq(@bundle.data,0x1234,'test autobind')
      .end()

class ChannelAutoBind extends Module
  u0_cell1: new cell1()
  u0_cell2: new cell2()

  constructor: ->
    super()

    Mixin importLib('verilog_helpers.chdl')

    Channel(
      ch1: @mold(@u0_cell1)
    )

    Probe(
      ch2: 'u0_cell2.ch'
    )

  build: ->
    $channelPortHub(@ch2.bundle,@ch1.bundle)

    mold_out = vreg(16,'mold_out')

    initial
      $sequence()
      .delay(200) =>
        assign mold_out = @ch1.bundle.data
        @assert_eq(mold_out,0x1234,'test mold autobind')
        @assert_report('channel autobind')
        @sim_finish()
      .end()

module.exports=ChannelAutoBind

