#########################################################3
# Design
#########################################################3
class cell1 extends Module
  constructor: ->
    super()
    Port(
      bundle:
        din: input(16)
        dout: output(16)
      select: output(8)
    )

  build: ->
    assign @bundle.dout = @bundle.din
    assign @select = 0x11

class cell2 extends Module
  u0_cell1: new cell1()
  u1_cell1: new cell1()
  constructor: ->
    super()

    Channel(
      ch1: channel()
      ch2: channel()
    )

    @u0_cell1.bind(
      bundle: @ch1
    )

    @u1_cell1.bind(
      bundle: @ch2
    )

  build: ->


class ChannelProbe extends Module
  u0_cell2: new cell2()
  u0_cell1: new cell1()

  constructor: ->
    super()
    Port(
      cell2_port: bind('u0_cell2.ch1')
      dout: output(16)
    )

    Probe(
      cell2_probe: 'u0_cell2.ch2'
    )

    Channel(
      cell1_ch: channel()
      cell1_select: channel()
    )

    @u0_cell1.bind(
      bundle: @cell1_ch
      select: @cell1_select
    )

  build: ->
    assign @cell1_ch.din = 0x2222
    assign @cell2_probe.din   = 0x3333
    assign(@dout) = @cell2_port.din+@cell1_select+@cell1_ch.dout(3:0)+@cell2_probe.dout

class tb extends Module
  dut: new ChannelProbe()

  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Channel(
      ch1: channel()
      ch2: channel()
      )

    @dut.bind(
      cell2_port: @ch1
      dout: @ch2
      )

  build: ->
    initial
      $sequence()
      .delay(100) =>
        assign @ch1.din= 0x1111
      .delay(100) =>
        @assert_eq(@ch1.dout,0x1111,'test connection')
        @assert_eq(@ch2,0x4457,'test connection')
        @assert_report('channel probe')
        @sim_finish()
      .end()

module.exports=tb

