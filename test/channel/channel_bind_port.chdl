#########################################################3
# Design
#########################################################3
class cell1 extends Module
  constructor: ->
    super()
    Port(
      bundle:
        din: input(16)
        dout: output(16)
    )

  build: ->
    assign @bundle.dout = @bundle.din

class cell2 extends Module
  u0_cell1: new cell1()
  constructor: ->
    super()

    Channel(
      ch1: channel()
      )

    @u0_cell1.bind(
      bundle: @ch1
    )

  build: ->

class cell3 extends Module
  constructor: ->
    super()
    Port(
      dout: output(16)
    )

  build: ->
    assign @dout = 0x1234


class ChannelBindPort extends Module
  u0_cell2: new cell2()
  u0_cell1: new cell1()
  u0_cell3: new cell3()

  constructor: ->
    super()
    Port(
      cell1_port: bind('cell1_ch')
      cell2_port: bind('u0_cell2.ch1')
      cell3_port: bind('cell3_ch')
    )

    Channel(
      cell1_ch: channel()
      cell3_ch: channel()
    )

    @u0_cell1.bind(
      bundle: @cell1_ch
    )

    @u0_cell3.bind(
      dout: @cell3_ch
    )

  build: ->

class tb extends Module
  dut: new ChannelBindPort()

  constructor: ->
    super()
    Mixin importLib('verilog_helpers.chdl')
    Channel(
      cell1_port: channel()
      cell2_port: channel()
      cell3_port: channel()
    )

    @dut.bind(
      cell1_port: @cell1_port
      cell2_port: @cell2_port
      cell3_port: @cell3_port
    )

  build: ->
    initial
      $sequence()
      .delay(100) =>
        assign @cell1_port.Port.din = 0x55aa
        assign @cell2_port.Port.din = 0x7788
      .delay(100) =>
        @assert_eq(@cell1_port.Port.dout,0x55aa,'test connection')
        @assert_eq(@cell2_port.Port.dout,0x7788,'test connection')
        @assert_eq(@cell3_port.Port,0x1234,'test connection')
        @assert_report('channel bind port')
        @sim_finish()
      .end()

module.exports=tb

