var _marked = /*#__PURE__*/regeneratorRuntime.mark(hello__1);

function hello__1(din, enable) {
  var a, b;
  return regeneratorRuntime.wrap(function hello__1$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        //printf("start sequence sequence__2__3");
        lt(10, v0);
        //var sp[-1]=a<10

      case 1:
        isFalse(sp[-1],9);

        add(1, v0);
        mov(v0, sp[-1]);
        next(6;);

      case 6:
        jump();
        next(1;);

      case 9:
        eq(1, v1);
        ge(100, v0);
        logicAnd(sp[-2], sp[-1]);
        //var sp[-1]=din==1&&a>=100

        isFalse(sp[-1],20);

        add(v2, 100);
        lshift(12, sp[-1]);
        mov(v2, sp[-1]);
        next(18;);

      case 18:
        next(31;);

      case 20:
        isFalse(v3,28);

        mul(2, 300);
        add(-100, sp[-1]);
        mov(v2, sp[-1]);
        next(26;);

      case 26:
        next(31;);

      case 28:

        mov(v2, 200);
        next(31;);

      case 31:
      case "end":
        return _context.stop();
    }
  }, _marked);
}


