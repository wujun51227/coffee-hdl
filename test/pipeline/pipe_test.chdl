#########################################################3
# Design
#########################################################3

class PipeTest extends Module
  constructor: ->
    super()
    Port(
      in1: input(5)
      enable: input()
      dout1: output()
      dout2: output()
      clk: input().asClock()
      clk1: input().asClock()
      reset: input().asReset()
      reset1: input().asReset()
    )

    Wire(
      sync_sig: wire(5)
      )


  doSync: (sigIn,sigOut)->
    width=sigIn.getWidth()
    d1 = local_reg(width,'sync').clock(@clk1).reset(@reset1)
    d2 = local_reg(width,'sync').clock(@clk1).reset(@reset1)
    assign(d1) = $ sigIn
    assign(d2) = $ d1
    assign(sigOut) = $ d2

  build: ->
    @doSync(@in1,@sync_sig)

    ff={
      d1: local_reg(32)
      d2: local_reg(32)
    }
    assign(ff.d1) = $ @in1
    assign(ff.d2)
      $if(@dout1==0)
        $if(@in1) => $ ff.d1
        $else => $ 32\h100
        $endif
      $else => 0
      $endif
    assign(@dout2) = $ (!ff.d1) & ff.d2

module.exports=PipeTest

