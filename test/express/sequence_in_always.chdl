class SequenceInAlways extends Module
  constructor: ->
    super()
    Port(
      out: input(5)
      sel: input()
      sel1: input()
      out1: input()
      out2: input()
      out3: input()
    )

    Reg(
      aa: reg()
      xx: reg()
    )

    Wire(
      bb: wire()
      addr1: wire()
      addr2: wire()
    )

  build: ->

    write= =>
      $sequence('writeSeq') =>
          assign(@aa) = $ 890
        .posedge(@sel,'wait_aa') =>
          assign(@aa) = $ @out1
        .next(5,'count5') =>
          assign(@aa) = $ @out1+1
        .negedge(@sel1,'wait_sel1_fall') (transition,next)=>
          $if(transition) => assign(@aa) = $ @out2
          $elseif(next) => assign(@aa) = $ @out2-123
          $else => assign(@aa) = $ 100
          $endif
        .wait($(@sel==1),'final') (trans,next)=>
          assign(@aa) = $ @out2
          $if(next)
            assign(@bb) = $ 1
          $endif
        .end()

    read= (xx)=>
      $sequence('read') =>
        .posedge(@sel) =>
          assign(xx) = $ @out1
        .wait($(@sel==1)) =>
          assign(xx) = $ @out2
        .end()

    #write()

    #a=@_sequence('delay')
    #  .delay(null) =>
    #    assign(@aa) = $ 1
    #  .delay(10) =>
    #    assign(@aa) = $ 1
    #  .delay(10_) =>
    #    assign(@aa) = $ 1
    #  .event('hello') =>
    #  .end()

    #b=@_sequence('write')
    #  .posedge(@sel) =>
    #    assign(@aa) = $ @out1
    #  .negedge(@sel) =>
    #    assign(@aa) = $ @out2
    #  .negedge(@sel) =>
    #  .wait($(@sel==1) =>
    #    assign(@aa) = $ @out2
    #  .end()

    always
      #write()
      read(@addr1)
      #write()
      #@series(write,read,read)
      #@series('write','read')

    always
      write()

module.exports=SequenceInAlways

