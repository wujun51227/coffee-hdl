
class cell1 extends Module
  constructor: ->
    super()
    Port(
      clk: input().asClock()
      rstn: input().asReset()
      din: input(16)
      dout: output(16).asReg()
    )

  build: ->
    consign @dout=@din

class cell2 extends Module
  constructor: ->
    super()
    Port(
      clk: input().asClock()
      rstn: input().asReset()
      dout : output(16).asReg()
    )

  build: ->
    consign @dout = @dout + 1

class clk_gen extends Module
  constructor: ->
    super()
    Port(
      clk: input().asClock()
      rstn: input().asReset()
      clk_div2: output().asReg().asGenerateClock()
    )

  build: ->
    consign @clk_div2=!@clk_div2


class generate_clk extends Module
  constructor: ->
    super()
    Port(
      clk: input().asClock()
      clk2: input().asClock()
      rstn: input().asReset()
      dout0: output(16)
      dout1: output(16)
    )

    @p0=new cell1()
    @p1=new cell1()
    @u0=new cell2()
    @clk_gen0=new clk_gen()
    @clk_gen1=new clk_gen()
    CellList(
      @p0
      @p1
      @u0
      @clk_gen0
      @clk_gen1

    )

    Channel(
      ch_p0: mold(@p0)
      ch_p1: mold(@p1)

      ch_u0: mold(@u0)

      cg0: mold(@clk_gen0)
      cg1: mold(@clk_gen1)
    )

  build: ->
    assign @ch_p0.clk = @cg0.clk_div2
    assign @ch_p1.clk = @cg1.clk_div2


    assign @ch_p0.din = @ch_u0.dout
    assign @ch_p1.din = @ch_u0.dout

    assign @dout0 = @ch_p0.dout
    assign @dout1 = @ch_p1.dout

    #assign @cg0.clk = @clk
    assign @cg1.clk = @clk2


module.exports=generate_clk

