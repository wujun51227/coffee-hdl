RecursiveIterator = require 'recursive-iterator'
_ = require 'lodash'
{toFlatten} = require('chdl_utils')

module.exports={
  createSigArray: (type,number,width=1)->
    throw new Error('createSigArray is deprecated, use createArray(number,func)')
    #return (type(width) for i in [0...number])

  createArray: (number,func)->
    return (func() for i in _.range(number))

  createChannelArray: (number)->
    throw new Error('createSigArray is deprecated, use createArray(number,func)')
    #return (channel() for i in [0...number])

  numWidth: (number)->
    Math.floor(Math.log2(number))+1

  $sigMux:(select,sig1,sig2)->
    selSig=wire(sig1.getWidth(),'sel')
    assign(selSig)
      $if(select) => $ sig1
      $else => $ sig2
      $endif
    return $ selSig
    
  $channelMux:(select,outChannel,inChannelList...)->
    for dst in outChannel.wireList()
      list=[]
      width=dst.net.getWidth()
      for src,index in inChannelList when dst.dir=='input'
        Net eq = (select==index)
        list.push($ expand(width,eq) & src.getWire(dst.path))
      if dst.dir=='input'
        assign(dst.net) = $join(list,(sum,i)=>$(sum+i))
      else if dst.dir=='output'
        for src,index in inChannelList
          assign(src.getWire(dst.path)) = dst.net

  mirrorPort:(i)->
    iterator=new RecursiveIterator(i)
    item=iterator.next()
    out={}
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function' and state.node.__type=='port'
        width=state.node.getWidth()
        if state.node.getType()=='input'
          _.set(out,state.path,output(width))
        else if state.node.getType()=='output'
          _.set(out,state.path,input(width))
      item = iterator.next()
    return out

  $stubPort:(i)->
    iterator=new RecursiveIterator(i)
    item=iterator.next()
    out={}
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function' and state.node.__type=='wire'
        width=state.node.getWidth()
        if state.node.getType()=='input'
          drive=vreg(width,state.node.getName())
          assign(state.node) = drive
          _.set(out,state.path,drive)
        else if state.node.getType()=='output'
          load = wire(width,state.node.getName())
          _.set(out,state.path,load)
          assign(load) = state.node
      item = iterator.next()
    return out

  $portHub:(list...)->
    clone_list=list[...]
    i=0
    while i<clone_list.length
      dst=clone_list.shift()
      for [name,port] in toFlatten(dst)
        if name
          el=_.get(dst,name)
          if port.getType()=='input'
            for n in clone_list
              find=_.get(n,name)
              if find? and find.getType()=='output'
                assign(find) = el
        else
          for n in clone_list when n.__type=='port'
            if n.getType()=='output'
              assign(port) = n
      clone_list.push(dst)
      i+=1

  $portBind:(a,b)->
    for [name,port] in toFlatten(a)
      if name
        el=_.get(a,name)
        if port.getType()=='input'
          find=_.get(b,name)
          if find? and find.getType()=='input'
            assign(find) = el
        else if port.getType()=='output'
          find=_.get(b,name)
          if find? and find.getType()=='output'
            assign(el) = find
      else
        if b.getType()=='output'
          assign(port) = b
        else if b.getType()=='input'
          assign(b) = port

  $channelPortHub:(list...)->
    clone_list=list[...]
    i=0
    while i<clone_list.length
      dst=clone_list.shift()
      for [name,port] in toFlatten(dst)
        if name
          el=_.get(dst,name)
          for n in clone_list
            find=_.get(n,name)
            if find? and find.getType()=='output' and port.getType()=='input'
              if find.getWidth()!=port.getWidth()
                throw new Error("port connect width mismatch")
              if not el.isAssigned()
                assign(el) = find
        else
          for n in clone_list when n.__type=='wire'
            if n.getType()=='output' and port.getType()=='input'
              if n.getWidth()!=port.getWidth()
                throw new Error("port connect width mismatch")
              if not port.isAssigned()
                assign(port) = n
      clone_list.push(dst)
      i+=1

  bundleClone:(i)->
    iterator=new RecursiveIterator(i)
    item=iterator.next()
    out={}
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function' and state.node.__type=='port'
        width=state.node.getWidth()
        if state.node.getType()=='input'
          _.set(out,state.path,input(width))
        else if state.node.getType()=='output'
          _.set(out,state.path,output(width))
      if state.node.constructor.name=='Function' and state.node.__type=='wire'
        width=state.node.getWidth()
        _.set(out,state.path,wire(width))
      if state.node.constructor.name=='Function' and state.node.__type=='reg'
        width=state.node.getWidth()
        _.set(out,state.path,reg(width))
      item = iterator.next()
    return out

  $bundleMap:(o,i,func)->
    iterator=new RecursiveIterator(o)
    item=iterator.next()
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function'
        if state.node.__type=='wire' or state.node.__type=='reg' or state.node.__type=='port'
          inWire=_.get(i,state.path)
          assign(state.node) = func(inWire)
      item = iterator.next()

  $bundleJoin:(o,list,func)->
    iterator=new RecursiveIterator(o)
    item=iterator.next()
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function'
        if state.node.__type=='wire' or state.node.__type=='reg' or state.node.__type=='port'
          sigList=[]
          for i in list
            sigList.push _.get(i,state.path).refName()
          assign(state.node)
            $reduce(sigList,(sum,item,first,last)=>
              if first
                $ item
              else
                func(sum,item)
            )
      item = iterator.next()

  $order: (list,defaultValue=0)->
    plist=[]
    conds=[]
    findDefault=false
    for {cond,value} in list
      conds.push cond
      if value?
        if conds.length==1
          if conds[0]==null or conds[0].str=='null'
            plist.push(value())
            findDefault=true
          else
            plist.push [conds[0],value()]
        else
          tmp=$join(conds,(a,b)=>$ (a)||(b))
          plist.push [tmp,value()]
        conds=[]
    unless findDefault
      console.log '##################################'
      console.log 'Use defaultValue in $order will be deprecated, please use $cond(null) => $ default_value'
      console.log '##################################'
      plist.push(defaultValue)
    return $reduceRight(plist,(sum,item,first,last)=>
      if first
        $ item
      else
        $if(item[0])
          $ item[1]
        $else
          $ sum
        $endif
    )

  $join: (list,func)->
    return $reduce(list,(sum,item,first,last)=>
      if first
        $ item
      else if last
        tmp=func(sum,item)
        $ (tmp)
      else
        func(sum,item)
    )

  $balance: (list,width=null) ->
    width=width ? @__assignWidth
    return $reduce(list,(sum,item,first,last)=>
      Net cond = item.cond
      if(first)
        $ (expand(width,cond)&(item.value()))
      else
        $ sum|(expand(width,cond)&(item.value()))
        )

  $doubleSync: (sigIn,clock='',reset='')->
    width=sigIn.getWidth()
    d1 = reg(width,'sync').clock(clock).reset(reset)
    d2 = reg(width,'sync').clock(clock).reset(reset)
    assign(d1) = sigIn
    assign(d2) = d1
    return $ d2

  $tripleSync: (sigIn,clock='',reset='')->
    width=sigIn.getWidth()
    d1 = reg(width,'sync').clock(clock).reset(reset)
    d2 = reg(width,'sync').clock(clock).reset(reset)
    d3 = reg(width,'sync').clock(clock).reset(reset)
    assign(d1) = sigIn
    assign(d2) = d1
    assign(d3) = d2
    return $ d3

  $bundleAssign:(from,to)->
    iterator=new RecursiveIterator(from)
    item=iterator.next()
    out={}
    while !item.done
      state = item.value
      if state.node.constructor.name=='Function'
        if state.node.__type=='port' or state.node.__type=='wire' or state.node.__type=='reg'
          toPoint=_.get(to,state.path)
          assign toPoint = state.node
      item = iterator.next()

  $grayNextCode: (code_word)->
    width = code_word.getWidth()
    condList=[]
    for i in _.range(width)
      condList.push($cond(code_word(i)) => $ 1<<i)
    condList.push($cond(null) => $ 0)
    Net(gray,width) = $order(condList)
    $if(hasOdd1(code_word))
      $if(gray(width-1)==1)
        $ 0
      $else
        $ code_word ^ (gray<<1)
    $else
      $ code_word ^ hex(width,1)

  $arrayMuxSet: (array,select,din,field=null)->
    len=array.length
    for i in [0...len]
      $if(i==select)
        if field?
          item = _.get(array[i],field)
          assign(item) = din
        else
          assign(array[i]) = din
      $endif

  $arrayDecode: (array,select,width=null,field=null)->
    len=array.length
    list=[]
    for i in [0...len]
      if field?
        list.push($cond(i==select) => $ _.get(array[i],field))
      else
        list.push($cond(i==select) => $ array[i])
    $balance(list,width)

  $rise: (sig,clock='',reset='')->
    d1 = reg(1,'r_').clock(clock).reset(reset)
    assign(d1) = sig
    return $ (sig & (!d1))

  $sample: (sig,clock='',reset='')->
    s = reg(sig.getWidth(),'sample_').clock(clock).reset(reset)
    assign s = sig
    return $ s

  $fall: (sig,clock='',reset='')->
    d1 = reg(1,'f_').clock(clock).reset(reset)
    assign(d1) = sig
    return $ ((!sig) & d1)

  $divider: (n,clk='',reset='')->
    width=Math.ceil(Math.log2(n))
    cnt = reg(width,'cnt').clock(clk).reset(reset)
    assign(cnt)
      $if(cnt=={n-1}) => $ 0
      $else => $ cnt+1
      $endif
    return  $ cnt=={n-1}

  $delay: (n,sig,clock='',reset='')->
    width=sig.getWidth()
    list=(reg(width).clock(clock).reset(reset) for i in _.range(n))
    for i in _.range(n)
      if i==0
        assign(list[0]) = sig
      else
        assign(list[i]) = list[i-1]
    return $ list[n-1]

  $count: (n,enable,clear,clock='',reset='')->
    width=Math.ceil(Math.log2(n))
    cnt = reg(width,'cnt').clock(clock).reset(reset)
    assign(cnt)
      $if(clear) => $ 0
      $elseif(enable)
        $if(cnt=={n-1}) => $ 0
        $else => $ cnt+1
        $endif
      $else => $ cnt
      $endif
    return  $ cnt=={n-1}

  $count1: (sig)->
    list=sig.toList()
    return $join(list,(a,b)=>$ a+b)

  $hold1: (sig,clear,clock='',reset='')->
    out = wire(1,'hold')
    latch = reg(1,'hold').clock(clock).reset(reset)
    latch_clear = reg(1,'clear').clock(clock).reset(reset)
    assign(out) = (sig | latch)&(!latch_clear)
    assign latch_clear = clear
    always
      $if(clear)
        assign(latch) = 0
      $elseif(sig==1)
        assign(latch) = 1
      $endif
    return  $ out

  $hold0: (sig,clear,clock='',reset='')->
    out = wire(1,'hold')
    latch = reg(1,'hold').init(1).clock(clock).reset(reset)
    latch_clear = reg(1,'clear').clock(clock).reset(reset)
    assign(out) = (sig & latch) | latch_clear
    assign latch_clear = clear
    always
      $if(clear)
        assign(latch) = 1
      $elseif(sig==0)
        assign(latch) = 0
      $endif
    return  $ out

  $holdData: (sig,enable,initValue=null,clock='',reset='')->
    out = wire(sig.getWidth(),'hold')
    latch = reg(sig.getWidth(),'hold').clock(clock).reset(reset).init(initValue)
    assign(out)
      $if(enable) => $ sig
      $else => $ latch
      $endif

    always
      $if(enable)
        assign(latch) = sig
      $endif
    return  $ out

  $oneOf: (sig,list)->
    return $reduce(list,(sum,item,first,last)=>
      if first
        $ (sig==item)
      else if last
        $ (sum||(sig==item))
      else
        $ sum||(sig==item)
    )

  $same: (list)->
    sig=list[0]
    return $reduce(list[1...],(sum,item,first,last)=>
      if first
        $ (sig==item)
      else if last
        $ (sum&&(sig==item))
      else
        $ sum&&(sig==item)
    )

  $inRange: (sig,low,high,inc_low=true,inc_high=true)->
    if inc_low
      if inc_high
        return $ (low<=sig)&&(sig<=high)
      else
        return $ (low<=sig)&&(sig<high)
    else
      if inc_high
        return $ (low<sig)&&(sig<=high)
      else
        return $ (low<sig)&&(sig<high)

  $case: (sig)->
    return (block)=>
      cond_hold=[]
      list=[]
      for i in block()
        cond_hold.push(i)
        if i.value?
          list.push cond_hold
          cond_hold=[]
      if cond_hold.length>0
        throwe new Error('last cond function is null')

      for conds in list.reverse()
        if conds.length==1
          if conds[0].cond? and conds[0].cond.str!='null'
            $if(sig==conds[0].cond) => conds[0].value()
          else
            conds[0].value()
        else
          lastCond=_.last(conds)
          condList=_.map(conds,(i)=>i.cond)
          tmp = $reduce(condList,(sum,item,first,last)=>
            if first
              $ (sig==item)
            else
              $ sum||(sig==item)
          )
          $if(tmp) => lastCond.value()

  $headPadding:(sig,num,v=0)->
    return $ cat(bin(num,v),sig)

  $tailPadding:(sig,num,v=0)->
    return $ cat(sig,bin(num,v))

  $headPaddingTo:(sig,total,v=0)->
    w = sig.getWidth()
    if w<total
      num = total-w
      return $ cat(bin(num,v),sig)
    else
      sig

  $tailPaddingTo:(sig,total,v=0)->
    w = sig.getWidth()
    if w<total
      num = total-w
      return $ cat(sig,bin(num,v))
    else
      sig

  $seqState:(stateReg,nextState,lastStateReg,bin)->
    assign(stateReg) = nextState
    assign(lastStateReg) = stateReg
    for i,index in bin when i.type=='next' and i.enable?
      assign(i.enable) = stateReg.isState(bin[index-1].id)
    for i,index in bin when i.active? and index>0 and (index!=bin.length-1)
      assign(i.active) = (stateReg.isState(i.id))&&(lastStateReg.isState(bin[index-1].id))
    cache={}
    for i,index in bin when i.next?
      expr= $ (stateReg.getState(bin[index+1].id)==nextState)
      if cache[expr.e.str]?
        assign(i.next) = cache[expr.e.str]
      else
        assign(i.next) = expr
        cache[expr.e.str]=i.next

  $buildSeqBlock:(seqBlock)->
    stateReg=seqBlock.stateReg
    nextState=seqBlock.nextState
    updateWires=seqBlock.update
    always
      nextState.pending(stateReg)
      for i,index in seqBlock.bin
        if index==0
          lastState=stateReg.getState('idle')
          lastBin=null
        else
          lastState=stateReg.getState(seqBlock.bin[index-1].id)
          lastBin=seqBlock.bin[index-1]
        currentState=stateReg.getState(i.id)
        if i.type=='next'
          $if(stateReg==lastState)
            if i.expr==null
              assign nextState =currentState
            else
              $if(i.expr)
                assign nextState = currentState
        else if i.type=='posedge' or i.type=='negedge' or i.type=='wait'
          $if(stateReg==lastState)
            if i.isLast
              $if(i.expr)
                assign nextState = currentState
              $else
                assign nextState = stateReg.getState('idle')
            else
              $if(i.expr)
                assign nextState = currentState
    always
      for i,index in seqBlock.bin
        if i.func?
          $if(stateReg.isState(i.id))
            if index==0
              i.func(i.next)
            else
              i.func(i.active,i.next)

  $stateSwitch: (stateReg)->
    return (func)=>
      obj=func()
      always
        for src,list of obj
          if _.last(list).cond!=null
            list.push($cond() => $ stateReg)
          $if(stateReg.isState(src))
            assign stateReg = $order(list)
}
