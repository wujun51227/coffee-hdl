sToHex=(s)->
  buf=Buffer.from(s)
  return "512'h"+buf.toString('hex')

prefix='[chdl_assert] '
message_prefix='[chdl_message] '

module.exports={
  init: ->
    Reg(
      assert_fail_flag: vreg().init(0)
      assert_message: vreg(512).init(0)
    )

  dump_wave: (fileName)->
    initial
      $sequence()
      .init ()=>
        if fileName.match(/\.fsdb$/)
          @verilog("$fsdbDumpfile(\"#{fileName}\");")
          @verilog("$fsdbDumpvars;")
        else
          @verilog("$dumpfile(\"#{fileName}\");")
          @verilog("$dumpvars;")
      .end()

  sim_finish: ()->
    @verilog("$finish;")

  create_clock: (clk,period=10)->
    forever
      $sequence()
      .delay(period/2) =>
        assign(clk) = !clk
      .end()

  create_resetn: (rstn,assert_start=0,assert_hold_time=100)->
    initial
      $sequence()
      .delay(assert_start) =>
        assign rstn = 0
      .delay(assert_hold_time) =>
        assign rstn = 1
      .end()

  assert_1: (sig,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig!==1)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should be 1\",$time);")
      assign @assert_fail_flag = 1

  assert_0: (sig,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig!==0)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should be 0\",$time);")
      assign @assert_fail_flag = 1

  assert_eq: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig!==value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should be #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_ne: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig===value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should NOT be #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_ge: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig<value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should >= #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_gt: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig<=value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should > #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_le: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig>value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should <= #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_lt: (sig,value,message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(sig>=value)
      @verilog("$display(\"#{prefix}%0t Error: #{sig.getName()} should < #{value}\",$time);")
      assign @assert_fail_flag = 1

  assert_report: (message='')->
    if message
      assign @assert_message = sToHex(message)
      @verilog("$display(\"#{message_prefix}%0s\",assert_message);")
    $if(@assert_fail_flag==0)
      @verilog("$display(\"#{prefix}Simulation Pass\");")
    $else
      @verilog("$display(\"#{prefix}Simulation Fail\");")
      
}
