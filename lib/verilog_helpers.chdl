assert_module = GlobalModule(importLib('chdl_assert.chdl.js'))
global  = require('chdl_global')
{toFlatten}=require('chdl_utils')

module.exports={
  dump_wave: (fileName)->
    initial
      $sequence()
      .init ()=>
        if global.getWaveFormat()=='fsdb'
          @verilog("$fsdbDumpfile(\"#{fileName}.fsdb\");")
          @verilog("$fsdbDumpvars;")
        else if global.getWaveFormat()=='vcd'
          @verilog("$dumpfile(\"#{fileName}.vcd\");")
          @verilog("$dumpvars;")
      .end()

  sim_finish: ()->
    @verilog("$finish;")

  random: (seed='')->
    return $("$urandom#{seed}")

  set_monitor:(name,inst_list...)->
    fileName = name ? @getHierarchy()+'.monitor'
    assert_module.monitor_handle.noInit()
    handle = assert_module.monitor_handle
    initial
      $sequence()
      .init =>
        assign assert_module.monitor_handle= {"$fopen(\"#{fileName}\")"}
        @display("#{assert_module.message_prefix} Create file #{fileName}")
        for inst in inst_list
          for [name,item] in toFlatten(inst.__local_regs)
            @verilog("$fmonitor(#{handle.oomrName()},\"%d #{item.oomrName()}\",$time,#{item.oomrName()});")
      .end()
    return assert_module.monitor_handle

  inst_monitor: (inst)->
    handle = assert_module.monitor_handle
    initial
      $sequence()
      .delay(0.1) =>
        for [name,item] in toFlatten(inst.__local_regs)
          @verilog("$fmonitor(#{handle.oomrName()},\"%d #{item.oomrName()}\",$time,#{item.oomrName()});")
      .end()

  fopen:(name=null)->
    fileName = name ? @getHierarchy()+'.dump'
    handle=vreg(32)
    initial
      $sequence()
      .init =>
        assign handle= {"$fopen(\"#{fileName}\")"}
        @display("#{assert_module.message_prefix} Create file #{fileName}")
      .end()
    return handle

  fdisplay:(handle,s,args...)->
    if args.length==0
      @verilog("$fdisplay(#{$(handle)},\"#{s}\");")
    else
      @verilog("$fdisplay(#{$(handle)},\"#{s}\",#{args.join(',')});")

  create_clock: (clk,period=10)->
    forever
      $sequence()
      .delay(period/2) =>
        assign(clk) = !clk
      .end()

  create_resetn: (rstn,assert_start=0,assert_hold_time=100)->
    initial
      $sequence()
      .init =>
        assign rstn = 1
      .delay(assert_start) =>
        assign rstn = 0
      .delay(assert_hold_time) =>
        assign rstn = 1
      .end()

  assert_1: (sig,message='')->
    assert_module.compare_gen('eq').call(this,sig,1,message)

  assert_0: (sig,message='')->
    assert_module.compare_gen('eq').call(this,sig,0,message)

  assert_eq: (sig,value,message='')->
    assert_module.compare_gen('eq').call(this,sig,value,message)

  assert_ne: (sig,value,message='')->
    assert_module.compare_gen('ne').call(this,sig,value,message)

  assert_ge: (sig,value,message='')->
    assert_module.compare_gen('ge').call(this,sig,value,message)

  assert_gt: (sig,value,message='')->
    assert_module.compare_gen('gt').call(this,sig,value,message)

  assert_le: (sig,value,message='')->
    assert_module.compare_gen('le').call(this,sig,value,message)

  assert_lt: (sig,value,message='')->
    assert_module.compare_gen('lt').call(this,sig,value,message)

  assert_fail: (message='')->
    assert_module.fail_gen().call(this,message)

  assert_report: (message='')->
    assert_module.report_gen().call(this,message)
}
