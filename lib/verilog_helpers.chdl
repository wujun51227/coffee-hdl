assert_module = GlobalModule(importLib('./chdl_assert.chdl.js'))

module.exports={
  dump_wave: (fileName)->
    initial
      $sequence()
      .init ()=>
        if fileName.match(/\.fsdb$/)
          @verilog("$fsdbDumpfile(\"#{fileName}\");")
          @verilog("$fsdbDumpvars;")
        else
          @verilog("$dumpfile(\"#{fileName}\");")
          @verilog("$dumpvars;")
      .end()

  sim_finish: ()->
    @verilog("$finish;")

  create_clock: (clk,period=10)->
    forever
      $sequence()
      .delay(period/2) =>
        assign(clk) = !clk
      .end()

  create_resetn: (rstn,assert_start=0,assert_hold_time=100)->
    initial
      $sequence()
      .delay(assert_start) =>
        assign rstn = 0
      .delay(assert_hold_time) =>
        assign rstn = 1
      .end()

  assert_1: (sig,message='')->
    assert_module.compare_gen('eq').call(this,sig,1,message)

  assert_0: (sig,message='')->
    assert_module.compare_gen('eq').call(this,sig,0,message)

  assert_eq: (sig,value,message='')->
    assert_module.compare_gen('eq').call(this,sig,value,message)

  assert_ne: (sig,value,message='')->
    assert_module.compare_gen('ne').call(this,sig,value,message)

  assert_ge: (sig,value,message='')->
    assert_module.compare_gen('ge').call(this,sig,value,message)

  assert_gt: (sig,value,message='')->
    assert_module.compare_gen('gt').call(this,sig,value,message)

  assert_le: (sig,value,message='')->
    assert_module.compare_gen('le').call(this,sig,value,message)

  assert_lt: (sig,value,message='')->
    assert_module.compare_gen('lt').call(this,sig,value,message)

  assert_report: (message='')->
    assert_module.report_gen().call(this,message)
}
